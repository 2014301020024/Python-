

1.python是什么类型的语言？

答：Python是脚本语言。
    脚本语言(Scripting language)是电脑编程语言，能让开发者藉以编写出让电脑听命行事的程序。
    以简单的方式快速完成某些复杂的事情通常是创造脚本语言的重要原则，基于此，使得脚本语言通常比 C语言、C++语言 或 Java 之类的系统编程语言要简单容易。


2.IDLE是什么？

答：IDLE是一个python shell，用来编程的外壳，是一个通过键入文本与程序交互的途径。
    
    
3.python3.0版本及以上中的输出指令

答：>>>print（）。其中 >>>printf（）和 >>>print不加括号已不适用。


4. 为什么 >>>print('Love' * 5) 可以正常执行，但 >>>print('Love ' + 5) 却报错？

答：后者中括号里面的两部分为数字和文本，是两个完全不同的东西，没有什么意义。诸如数字加数字、字符串加字符串等。


5.在字符串中需要利用到双引号、单引号等，可使用“\”对其进行转义。


6.比较直接输入 >>>5+8 与输入 >>>print(5+8) 的不同之处

答：直接输入是将结果及类型打印到屏幕上，而print是将结果打印到屏幕上。



****************************************************************************************************************************************
1.什么是BIF？

答：BIF = Bulit-in Functions，即内置函数。为方便程序员快速编写脚本程序，Python 提供了非常丰富的内置函数，我们只需要直接调用即可，例 
   如“print”、“int”。

2.python3中一共提供了多少个BIF？

答：输入代码 >>>dir(__builtins__)  ##builtins前后均为两个下划线
   出现以下['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 
   'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 
   'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError',
   'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 
   'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'ModuleNotFoundError', 
   'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 
   'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning',
   'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 
   'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 
   'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', 
   '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'all', 'any',
   'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits',  
   'delattr','dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 
   'globals', 'hasattr','hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 
   'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range',   
   'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 
   'zip']
   共 68 个内置函数。
   
3.在Python中赋值的标识符一定要前后完全一样，例如Love = "Jiaonan"中对Love进行了赋值，后文中若出现love表示，则会出错，因为对Python来说Love和love是 
  完全不同的两个赋值标识符。
  
4.在python中一定要严格缩进！！！这使得Python的代码显得非常精简并且有层次。如果没有正确缩进，运行的代码可能会与你所期望的大相径庭。

5.“ = ”和“ == ”表示不同的含义,其中 “=”代表赋值，而“==”代表的是左右两边文本、形式、数字大小相同。

6.拼接字符串应如下：##数字和字符串不能直接拼接，需要进行转换，例如str(5)便把5变成了"5".
  1、"I love " + " you！"
  2、"I love " + "1" + " you！"

7.编写程序:love.py
  code:
       name = input("Xie Jiaonan")
       print(name + ", I love you so much")
  
8.编写一个calc.py 要求用户输入1到100之间数字并判断，输入符合要求打印“你妹好漂亮”，不符合要求则打印“你大爷好丑”
  code:
       num = input ("请输入一个在1到100内的数字:") #这里输入50的话，即为"50"
       if 1 <= int(num) < 50 :                   #这里用int()函数把"50"变成了数字50才可以接下来进行判断
          print("你真的好美丽!")
       else:
          print("你长得好生俊俏啊！")



*****************************************************************************************************************************************
###  数据类型和操作符


1.常用的数据类型有四种：str（文本数）、int（整数）、float（浮点数）、bool(布尔数）。
  >>> a = 3 < 4
      print(a)
  >>> True   ###布尔数


2.利用内置函数 type 和 isinstance 可以用来判断数据类型，但两者用法有别。
  type直接给出括号里数据的类型：(用法如下)
  >>> type(3.0)
  >>> <class'float'>
  >>> type("I love you">
  >>> <class'str'>
  
  isinstance进行的则是通过前后判断，给出Flase or Ture 的表示，括号文本前者放数据，后者放入数据类型：
  >>> isinstance(3.0,str)
  >>> Flase
  >>> isinstance(3.0,float)
  >>> True
  
 
3.python中的常用操作符及优先级问题。

答：常用操作符分为“ 算术操作符 ”和“ 逻辑操作符 ”。
    算术操作符：“ + ”、“ - ”、“ * ”(乘）、“ / ”（除）、“ ** ”（次方）、“ // ”(地板除)、“ % ”(余数)。
    余数“ % ” 用法示例：
        >>> 7 % 3
        >>> 1
        >>> 7.0 % 3
        >>> 1.0
    python3.0中“/"是真实意义的除法，“//”(地板除)则不同。
        例：
        >>> print(7/3)
        >>> 2.3333333333333335
        >>> print(7//3)
        >>> 2
        >>> print(7.0/3)
        >>> 2.0
    优先级问题：
        1) 符合加减乘除一般规律，先乘除后加减。
        >>> -5 * 6 + 8 / 2
        >>> -26
        2) 在涉及到“**”(次方)时，位于次方前的操作符优先级弱于次方，后面的操作符优于次方。
        >>> -3 ** 3
        >>> -27
        >>>  3 ** -1
        >>> 0.3333333333333333
        
    逻辑操作符：“and“(和)、“or”(或)、“not”(非)。
        1) and:  ### and左右同时Tru才print True，反之Flase
        >>> 3 < 4 and 4 < 5
        >>> True
        >>> 3 > 4 and 3 < 5
        >>> Flase
        2) or:    # or左右至少存在一个True就print True，反之Flase
        >>> 3 < 4 or 3 > 5
        >>> T        >>> 3 > 4 or 3 > 5
        >>> Flase
        3) not:   # not 右边陈述为False，则print True
        >>> not 3 > 4
        >>> True
        


*****************************************************************************************************************************************
### 分支和循环


Attention！！！
python中循环语句分为三种：“ if ”、“ while ”、 “ for ”。

if 分支：
· if XXX:
     print(XXX)    # 或者直接是XXX
  elif XXX:
     print(XXX)
  else:
     print(XXX)
· 示例：
  将考生的分数输入并转换为ABCD的形式。
  >>> g= int(input('请输入分数:'))
      if 100 >= g > 90:           # 如果分数在90-100之间
         print('A')               # 输出 'A'
      elif 80 <= g <= 90:
         print('B')
      elif 60 <= g < 80:
         print('C')
      elif 0 <= g <= 60:
         print('D')
      else:   
         print("你输错了")
         
· 悬挂“else”   
python中由于严格的缩进可以有效的避免“悬挂else”
    悬挂else：
    例：在C语言中，初学者很容易被以下欺骗
        if (a > 2)
           if (a > 7)
               printf( "good")
        else
           printf("bad")
        C语言中依靠的是“就近原则”
     而在python中如果缩进不规则，python程序同缩进同级别，缩进不严格程序不会运行。


·python程序开发者为了代码的简洁，开发出了“  三元操作符 ” ！！！！！！！
    例： >>> x,y = 3,4
             small = x if x < y else 
             print(small)
         >>> 3
       
    
whlie循环：  
·  while 条件：
       循环体
·  可在if示例的基础上进行改进：
   >>>g= int(input('请输入分数:'))
      while True:                                       #while 后一直为真 代表循环一直持续
         if 100 >= g > 90:                             
            print('A')
            g = int(input('请输入分数：'))
         elif 80 <= g <= 90:
            print('B')
            g = int(input('请输入分数：'))
         elif 60 <= g < 80:
            print('C')
            g = int(input('请输入分数：'))
         elif 0 <= g <= 60:
            print('D')
            g = int(input('请输入分数：'))
         else:   
            print("你输错了")
            g = int(input('请输入分数：'))
   在需要退出循环or继续循环的时候，可以在while后接语句中恰用“continue” or “break”。
      
for循环：
·  for 目标 in 表达式：
      循环体
·  使用示例：
     1)>>>Lover = Jiaonan'
        for i in Lover:             #依次循环Lover中文本字母
           print(i,end=' ')         #输出每个字母并每次以空格结尾
     >>>J i a o n a n
     2)>>>Heart = ['我'，'真的'，'很喜欢','小喵喵吖']
        for word in Heart:
           print(word,len(word))    #输出字符和相应的字符长度
     >>>我  1
        真的  2
        很喜欢  3
        小喵喵吖  4
          
在for循环中，经常与range()搭配：
range()
·  语法：range([start],stop[,step=1])
   这个BIF有三个参数，其中用括号括起来的两个表示这两个参数是可选的。
   step=1表示第三个参数的值默认值为1(见例5）、6）)。
   range这个BIF的作用是生成一个从start参数的值开始到stop参数的值结束的数字序列(但不包括stop数,见例2))。
·  1)>>> print(range(5))         #这里只出现了stop参数，则默认为start参数为0，step参数为1
     >>> range(0,5)
   2)>>> print(list(range(0,5))  #这里转换为了列表的形式   
     >>> [0,1,2,3,4]
   3)>>> for i in range(4)
          print(i)
     >>> 0
         1
         2
         3
   4)>>> for i in range(1,4)
          print(i)
     >>> 1
         2
         3
   5)>>> for i in range(1,10,3)      #第三个参数即为每一步为3，不出现就默认为step=1
          print(i）
     >>> 1
         4
         7
         10
   6)>>> for i in range(1,10,4)
          print(i)
     >>> 1
         5
         10
  
！！！python中常用 assert(断言) 用来检验语句正确性。
     当这个关键字后边的条件为假的时候，程序自动崩溃并抛出AssertionError的异常。
     例：>>>assert 3 > 4
         >>> XXX
             AssertionError
      一般来说我们可以用它在程序中置入检查点，当需要确保程序中的某个条件一定为真才能让程序正常工作的话，assert就很有用了。
     

 
 ****************************************************************************************************************************************
  ### 列表        
  
  1.首先列表的一般形式为list = [xx,xx,xx,xx,...]。
    其中xx可以为整数int、浮点数float，也可以为字符串string。
    ·举例
    >>>love = ["car","house",9,9.0,'heart']
    >>>print(love)                             result >>>["car","house",9,9.0,'heart']
  
  
  2.往列表里添加元素的三个内置函数：append()、extend()和insert(位置，'加入的元素')。
    其中append()和extend()均为在列表末尾依次加入，而insert更加灵活，可以选择位置插入所需的元素。
    append()括号中只能添加一个arguement（直接添加）：
    ·例如
     >>>love = ["car","house",9,9.0,'heart']
        love.append('xiejiaonan')
     >>>print(love)                            
     result: 
     >>>["car","house",9,9.0,'heart','xiejiaonan']
    而当其有两个arguement时，则会发生报错：
    ·>>>love = ["car","house",9,9.0,'heart']
        love.append('xiejiaonan','money')      
     result:
     TyperError:append(）takes exactly one arguement(2 given)
    
    extend()括号中也只能添加一个arguement，这点同append相似，其不同之处在于extend原理是利用一个列表来扩张另一个列表：
    ·例如
     >>>love = ["car","house",9,9.0,'heart']
        love.extend(['xiejiaonan'])
     >>>print(love)   
     result:
     >>>["car","house",9,9.0,'heart','xiejiaonan']
    ·>>>love = ["car","house",9,9.0,'heart']
        love.extend(['xiejiaonan','money'])
     >>>print(love)                            
     result: 
     >>>["car","house",9,9.0,'heart','xiejiaonan','money']
    
    insert(位置，'加入的元素')的用法:
    ·例如
     >>>love = ["car","house",9,9.0,'heart']
        love.insert(2,'you')
        print(love)
     result:
     >>>["car","house",'you',9,9.0,'heart']           
     
    ！！！在这里继续重申，Python中涉及数组等是从0开始算的。
  
  

 
        

